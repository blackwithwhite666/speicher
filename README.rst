========================================================================
 speicher - клиентская библиотека к несуществующему сервису кэширования
========================================================================

:Version: 0.1.0
:Web: https://speicher.readthedocs.org/
:Source: https://github.com/blackwithwhite666/speicher

--

Зачем нужна библиотека?
=======================

Основная цель библиотеки - предоставить подробную документацию
и набор тестов для разработки самого сервиса. Эталонной реализации
сервиса не существует. Предоставить работающую реализацию
сервиса и является тестовым заданием.


Что делает библиотека?
======================

Данная библиотека предоставляет синхронный интерфейс для работы
с простым key-value хранилищем, поддерживающим получение, сохранение и
удаление значения по ключу. Ключи и значения хранятся в виде строки. 

Хранилище является отдельным процессом, обрабатывающим входящие
соединения. В качестве транспорта используется `TCP/IP`. Для общения
с хранилищем используется бинарный протокол, его формат описан ниже.

Что нужно для разработки?
=========================

*speicher* поддерживает следующие реализации и версии Python:

- CPython (2.7, 3.3)

Необходим интерпретатор, поддерживающий Python как минимум версии 2.7.
Версии Python младше 2.7 не поддерживаются.

.. _installation:

Установка из исходников
=======================

Для разработки сервиса нужно создать отдельное виртуальное окружение
с использованием `virtualenv`::

    $ virtualenv venv

Для установки пакета в виртуальное окружение используется `pip`::

    $ pip install -e https://github.com/blackwithwhite666/speicher.git@master#egg=speicher

После этого пакет будет установлен в папку `src/speicher` виртуального 
окружения. Необходимые зависимости будут установлены автоматически.

.. _documentation:

Пример использования библиотеки
===============================

Краткий пример работы с библиотекой:

.. code-block:: python

   >>> import speicher
   >>> c = speicher.Speicher(host='localhost', port=14567)
   >>> c.set('foo', 'bar')
   True
   >>> c.get('foo')
   'bar'
   >>> c.delete('foo')
   True
   >>> c.close()

.. _protocol:

Описание протокола
==================

Для обмена данными с сервером используется бинарный протокол.

.. _unit-tests:

Тесты
=====

Для запуска тестов используется `tox`::

   $ tox

.. _bugs:

Трекер ошибок
=============

Отчёты об ошибках, предложения и вопросы можно оставить на нашем трекере
https://github.com/blackwithwhite666/speicher/issues/

.. _license:

Лицензия
=======

*speicher* доступен под лицензией MIT. Смотрите файл ``LICENSE`` для
получения более подробных сведений.
