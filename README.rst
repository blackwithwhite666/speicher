=================================================
 speicher - yet another key-value storage client
=================================================

:Version: 0.1.0
:Source: https://github.com/blackwithwhite666/speicher

Тестовое задание
================

Заданием является предоставить работающую реализацию сервиса, совместимого с
данным клиентом.

Требования к сервису
^^^^^^^^^^^^^^^^^^^^

- должен поддерживать версию Python 2.7;
- поддерживать протокол, описанный ниже;
- хранить все значения в памяти;
- использовать асинхронную модель обработки запросов;
- обрабатывать сигналы SIGINT и SIGTERM (процесс должен завершаться);
- должен поддерживать установку с помощью `pip` в виртуальное окружение;
- иметь краткую документацию о том, как установить и запустить сервис;
- обеспечивать атомарность операций не нужно;

Исходные коды сервиса можно расположить на `github`. Инструменты для реализации
остаются на усмотрение кандидата.

Зачем нужнен клиент?
====================

Основная цель клиента - предоставить подробную документацию
и набор тестов для разработки самого сервиса. Эталонной реализации
сервиса не существует.

Данный клиент предоставляет синхронный интерфейс для работы
с простым key-value хранилищем, поддерживающим получение, сохранение и
удаление значения по ключу. Ключи хранятся в виде строки. Значением может
быть любой тип, поддерживаемый JSON. 

Хранилище является отдельным процессом, обрабатывающим входящие
соединения. В качестве транспорта используется `TCP/IP`. Для общения
с хранилищем используется бинарный протокол, его формат описан ниже,
см. :ref:`protocol`.

.. _installation:

Установка из исходников
=======================

Для разработки сервиса нужно создать отдельное виртуальное окружение
с использованием `virtualenv`::

    $ virtualenv venv

И активировать его после установки::

    $ source venv/bin/activate

Для установки пакета в виртуальное окружение используется `pip`::

    $ pip install -e git+https://github.com/blackwithwhite666/speicher.git@master#egg=speicher

После этого пакет будет установлен в папку `src/speicher` виртуального
окружения. Необходимые зависимости будут установлены автоматически.

.. _documentation:

Что нужно для разработки?
=========================

*speicher* поддерживает следующие реализации и версии *Python*:

- CPython (2.7)

Необходим интерпретатор, поддерживающий Python как минимум версии 2.7.
Версии Python младше 2.7 не поддерживаются.

Пример использования библиотеки
===============================

Краткий пример работы с библиотекой:

.. code-block:: python

   >>> import speicher
   >>> c = speicher.Speicher(host='localhost', port=14567)
   >>> c.set('foo', 'bar')
   >>> c.get('foo')
   'bar'
   >>> c.delete('foo')
   True
   >>> c.reset()
   True
   >>> c.delete('foo')
   False
   >>> c.get('foo')
   None
   >>> c.close()

.. _protocol:

Описание протокола
==================

Формат пакета
^^^^^^^^^^^^^

Для обмена данными с сервером используется *JSON*. Перед каждым пакетом
располагается информация о его длине. То есть данные отправляются во фреймах,
где каждому фрейму предшествует длина информации. Длина передаётся в виде знаково
целого (*singed int*) с порядком байт от старшего к младшему (*big-endian*).
Размер поля, содержащего длину составляет 4 байта. За ним следует содержимое
пакета указанной длины, сериализованное в *JSON*.

Команды и ответы на них
^^^^^^^^^^^^^^^^^^^^^^^

Запросы и ответы являются словарями. Каждый запрос должен обязательно содержать
ключ `command`, определяющий какая команда должна быть выполнена на сервере::

    {'command': b'GET', ...}

Каждый ответ должен содержать ключ 'status_code', хранящий код ответа сервера::

    {'status_code': 200, ...}

Возможные коды ответов:

:200: запрос обработан успешно
:404: указанный ключ не найден
:400: некорректный запрос
:503: ошибка сервера

Список команд перечислен ниже.

SET
"""

Поля запроса:

:command: SET
:key: ключ, по которому должно быть установлено значение
:value: значение, которое должно быть установлено

Поля ответа:

:status_code: 200

Устанавливает заданное значение на сервере с указанным ключом. Если ключ
уже существует на сервере, то заменяет его значение.

GET
"""

Поля запроса:

:command: GET
:key: ключ, по которому должно быть установлено значение

Поля ответа:

:status_code: 200, если значение найдено, иначе 404
:value: значение ключа

Получает значение указанного ключа, если таковой есть. Если ключ не найден,
сервер должен вернуть ``None``.


DELETE
""""""

Поля запроса:

:command: DEL
:key: ключ, который должен быть удалён

Поля ответа:

:status_code: 200, если значение найдено, иначе 404

Удаляет запись с указанным ключом. Если ключ не найден, сервер должен вернуть
``False``.


RESET
"""""

Поля запроса:

:command: RST

Поля ответа:

:status_code: 200

Удаляет все имеющиеся записи на сервере.


.. _unit-tests:

Тесты
=====

Для запуска модульных тестов нужно выполнить::

   $ python setup.py test

.. _bugs:

Трекер ошибок
=============

Отчёты об ошибках, предложения и вопросы можно оставить на нашем трекере
https://github.com/blackwithwhite666/speicher/issues/

.. _license:

Лицензия
=======

*speicher* доступен под лицензией MIT. Смотрите файл ``LICENSE`` для
получения более подробных сведений.
